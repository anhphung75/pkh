###########
# BUILDER #-------------------------------------------------------------------------------
###########

# pull official base image
FROM ubuntu:18.04 as builder

ENV DEBIAN_FRONTEND noninteractive
ENV LANG C.UTF-8
ENV LC_ALL C.UTF-8
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

# install python dependencies
RUN apt-get update && apt-get install -y --fix-missing \
  curl make git ca-certificates openssl libssl-dev \
  apt-utils apt-transport-https build-essential debconf-utils \
  gnupg gcc libffi-dev g++ unixodbc-dev \
  python3-dev python3-pip python3-wheel \
  && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

RUN python3 -m pip install --upgrade pip wheel
# lint
# RUN python3 -m pip install --upgrade flake8 black

# install dependencies
WORKDIR /complier
COPY ./requirements.txt .
#RUN python3 -m pip wheel --no-cache-dir --no-deps --wheel-dir /complier/wheels -r requirements.txt
RUN python3 -m pip wheel --wheel-dir /complier/wheels -r requirements.txt

# check lint
# COPY . .
# RUN flake8 --ignore=E501,F401 . && black --check .


#########
# FINAL #----------------------------------------------------------------------------------
#########

# pull official base image
FROM ubuntu:18.04

ENV DEBIAN_FRONTEND noninteractive
ENV LANG C.UTF-8
ENV LC_ALL C.UTF-8
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

# install system utilities
RUN apt-get update && apt-get install -y --fix-missing --no-install-recommends \
  apt-utils apt-transport-https build-essential debconf-utils \
  curl gnupg unixodbc-dev ca-certificates openssl libssl-dev \
  python3-dev python3-pip python3-wheel

# install SQL Server drivers
RUN curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add -
RUN curl https://packages.microsoft.com/config/ubuntu/18.04/prod.list > /etc/apt/sources.list.d/mssql-release.list
RUN apt-get update && ACCEPT_EULA=Y apt-get install -y msodbcsql17 locales \
  # update locale-gen for mssql
  && echo "en_US.UTF-8 UTF-8" > /etc/locale.gen \
  && locale-gen \
  # update openssl to ssl1.1 for pyodbc
  && chmod +rwx /etc/ssl/openssl.cnf \
  && sed -i 's/TLSv1.2/TLSv1/g' /etc/ssl/openssl.cnf \
  && sed -i 's/SECLEVEL=2/SECLEVEL=1/g' /etc/ssl/openssl.cnf \
  && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# create system user=pkh, group_user=webapp
ENV APP_HOME=/home/web
RUN addgroup --system webapp \
  && adduser --system --home $APP_HOME --shell /bin/false --ingroup webapp --disabled-password --disabled-login pkh

# install webapp
WORKDIR $APP_HOME
COPY --from=builder /complier/wheels /wheels
COPY --from=builder /complier/requirements.txt .
RUN python3 -m pip install --upgrade pip wheel \
  && python3 -m pip install --no-cache /wheels/* \
  && rm -rf /wheels \
  && rm -rf /root/.cache/pip/* \
  && rm -rf /var/lib/apt/lists/* \
  && rm -rf /tmp/* \
  && rm -rf /var/tmp/* \
  && apt-get purge python3-pip python3-wheel -y\
  && apt-get autoremove -y\
  && apt-get clean

# copy project
COPY . $APP_HOME

# chown all the files to the app user
RUN chown -R pkh:webapp $APP_HOME

# change to the app user
USER pkh

# run entrypoint.prod.sh
# ENTRYPOINT ["/home/app/web/entrypoint.prod.sh"]

# run server
ENV APP_PORT=8000
EXPOSE 443 $APP_PORT
ENTRYPOINT python3 webapp.py --port=$APP_PORT