#!/usr/bin/env bash

http {
    # Enumerate all the Tornado servers here
    upstream frontends {
        server 127.0.0.1:8000;
        server 127.0.0.1:8001;
        server 127.0.0.1:8002;
        server 127.0.0.1:8003;
        server 127.0.0.1:8888;
        server webapp:8000;
        server webapp:8001;
        server webapp:8002;
        server webapp:8003;
        server webapp:8888;
    }

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    access_log /var/log/nginx/access.log;

    keepalive_timeout 65;
    proxy_read_timeout 200;
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    gzip on;
    gzip_min_length 1000;
    gzip_proxied any;
    gzip_types text/plain text/html text/css text/xml
               application/x-javascript application/xml
               application/atom+xml text/javascript;

    # Only retry if there was a communication error, not a timeout
    # on the Tornado server (to avoid propagating "queries of death"
    # to all frontends)
    proxy_next_upstream error;
    
    #convert http -> https
    ssl_certificate /app/web/ssl_cert/pkh.crt;
    ssl_certificate_key /app/web/ssl_cert/pkh.key;

    server {
      listen 80;
      server_name localhost;
      location / {
        return 301 https://$host$request_uri;
      }
    }
    
    server {
      listen 443 ssl;
      server_name localhost;
      # Allow file uploads
      client_max_body_size 500M;

      location ^~ /static/ {
          root /home/app/web;
          if ($query_string) {
              expires max;
          }
      }
      location = /favicon.png {
          rewrite (.*) /static/favicon.png;
      }
      location = /robots.txt {
          rewrite (.*) /static/robots.txt;
      }

      location / {
          proxy_pass_header Server;
          proxy_set_header Host $http_host;
          proxy_redirect off;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Scheme $scheme;
          proxy_pass http://frontends;
        }
    }
}